{
  "openapi": "3.0.0",
  "info": {
    "title": "Swagger Json",
    "description": "This is a generated swagger json for your sails project",
    "termsOfService": "http://example.com/terms",
    "contact": {
      "name": "Theophilus Omoregbee",
      "url": "http://github.com/theo4u",
      "email": "theo4u@ymail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:1337/"
    }
  ],
  "externalDocs": {
    "url": "https://theoomoregbee.github.io/"
  },
  "tags": [
    {
      "name": "Course",
      "description": "Sails blueprint actions for the **Course** model"
    },
    {
      "name": "Leadership",
      "description": "Sails blueprint actions for the **Leadership** model"
    },
    {
      "name": "Logbook",
      "description": "Sails blueprint actions for the **Logbook** model"
    },
    {
      "name": "Pricing",
      "description": "Sails blueprint actions for the **Pricing** model"
    },
    {
      "name": "Qualification",
      "description": "Sails blueprint actions for the **Qualification** model"
    },
    {
      "name": "Quality",
      "description": "Sails blueprint actions for the **Quality** model"
    },
    {
      "name": "Token",
      "description": "Sails blueprint actions for the **Token** model"
    },
    {
      "name": "User",
      "description": "Sails blueprint actions for the **User** model"
    },
    {
      "name": "Dashboard"
    },
    {
      "name": "Fetch users"
    },
    {
      "name": "Create"
    },
    {
      "name": "Login"
    },
    {
      "name": "Refresh token"
    },
    {
      "name": "Forgot password"
    },
    {
      "name": "Reset password"
    },
    {
      "name": "Resend link"
    },
    {
      "name": "Verify email"
    },
    {
      "name": "Status"
    },
    {
      "name": "Role"
    },
    {
      "name": "Verify"
    }
  ],
  "components": {
    "schemas": {
      "course": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/course-without-required-constraint"
          },
          {
            "required": [
              "courseTitle",
              "institution",
              "year",
              "certificateNo",
              "challenges",
              "keyPositives",
              "doDifferently"
            ]
          }
        ]
      },
      "course-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Course**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "courseTitle": {
            "type": "string",
            "maxLength": 150
          },
          "institution": {
            "type": "string",
            "maxLength": 250
          },
          "year": {
            "type": "string",
            "maxLength": 4
          },
          "certificateNo": {
            "type": "string"
          },
          "document": {
            "type": "string"
          },
          "challenges": {
            "type": "string"
          },
          "keyPositives": {
            "type": "string"
          },
          "doDifferently": {
            "type": "string"
          },
          "owner": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          }
        }
      },
      "leadership": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/leadership-without-required-constraint"
          },
          {
            "required": [
              "title",
              "startYear",
              "endYear",
              "challenges",
              "keyPositives",
              "doDifferently"
            ]
          }
        ]
      },
      "leadership-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Leadership**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "title": {
            "type": "string",
            "maxLength": 150
          },
          "startYear": {
            "type": "string",
            "maxLength": 11
          },
          "endYear": {
            "type": "string",
            "maxLength": 11
          },
          "challenges": {
            "type": "string"
          },
          "keyPositives": {
            "type": "string"
          },
          "doDifferently": {
            "type": "string"
          },
          "owner": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          }
        }
      },
      "logbook": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/logbook-without-required-constraint"
          },
          {
            "required": [
              "action",
              "logBookType",
              "firstTitle",
              "firstYear",
              "secondTitle",
              "secondYear",
              "summary",
              "challenges",
              "keyPositives",
              "doDifferently"
            ]
          }
        ]
      },
      "logbook-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Logbook**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "action": {
            "type": "string",
            "enum": [
              "Observe",
              "Assist",
              "Perform"
            ]
          },
          "logBookType": {
            "type": "string",
            "enum": [
              "logbook",
              "surgical"
            ]
          },
          "firstTitle": {
            "type": "string"
          },
          "firstYear": {
            "type": "string"
          },
          "firstDocument": {
            "type": "string"
          },
          "secondTitle": {
            "type": "string"
          },
          "secondYear": {
            "type": "string"
          },
          "secondDocument": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "challenges": {
            "type": "string"
          },
          "keyPositives": {
            "type": "string"
          },
          "doDifferently": {
            "type": "string"
          },
          "owner": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          }
        }
      },
      "pricing": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/pricing-without-required-constraint"
          },
          {
            "required": [
              "title",
              "duration",
              "pricing",
              "plans"
            ]
          }
        ]
      },
      "pricing-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Pricing**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "title": {
            "type": "string",
            "maxLength": 30
          },
          "duration": {
            "type": "string",
            "maxLength": 30
          },
          "pricing": {
            "type": "string",
            "maxLength": 30
          },
          "plans": {}
        }
      },
      "qualification": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/qualification-without-required-constraint"
          },
          {
            "required": [
              "education",
              "challenges",
              "keyPositives",
              "doDifferently"
            ]
          }
        ]
      },
      "qualification-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Qualification**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "education": {},
          "challenges": {
            "type": "string"
          },
          "keyPositives": {
            "type": "string"
          },
          "doDifferently": {
            "type": "string"
          },
          "owner": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          }
        }
      },
      "quality": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/quality-without-required-constraint"
          },
          {
            "required": [
              "title",
              "year",
              "details",
              "challenges",
              "keyPositives",
              "doDifferently"
            ]
          }
        ]
      },
      "quality-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Quality**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "title": {
            "type": "string",
            "maxLength": 150
          },
          "year": {
            "type": "string",
            "maxLength": 12
          },
          "details": {
            "type": "string"
          },
          "challenges": {
            "type": "string"
          },
          "keyPositives": {
            "type": "string"
          },
          "doDifferently": {
            "type": "string"
          },
          "owner": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          }
        }
      },
      "token": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/token-without-required-constraint"
          },
          {
            "required": [
              "userId",
              "token"
            ]
          }
        ]
      },
      "token-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Token**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "userId": {
            "type": "string",
            "uniqueItems": true
          },
          "token": {
            "type": "string",
            "uniqueItems": true
          }
        }
      },
      "user": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/user-without-required-constraint"
          },
          {
            "required": [
              "fullName",
              "email",
              "password",
              "role"
            ]
          }
        ]
      },
      "user-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **User**",
        "properties": {
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "string",
            "uniqueItems": true
          },
          "fullName": {
            "type": "string",
            "maxLength": 120
          },
          "img": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 200,
            "uniqueItems": true
          },
          "emailStatus": {
            "type": "string",
            "default": "unverified",
            "enum": [
              "unverified",
              "verified",
              "change-requested"
            ],
            "example": "unverified"
          },
          "emailChangeCandidate": {
            "type": "string",
            "format": "email",
            "description": "unverified email address that this user wants to change to"
          },
          "phone": {
            "type": "string",
            "maxLength": 11
          },
          "location": {
            "type": "string",
            "maxLength": 60
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "inactive"
            ],
            "example": "active"
          },
          "password": {
            "type": "string",
            "minLength": 8
          },
          "passwordResetToken": {
            "type": "string"
          },
          "passwordResetTokenExpiresAt": {
            "type": "number",
            "format": "double"
          },
          "emailProofToken": {
            "type": "string"
          },
          "emailProofTokenExpiresAt": {
            "type": "number",
            "format": "double"
          },
          "role": {
            "type": "string",
            "enum": [
              "supervisor",
              "client"
            ]
          },
          "qualification": {
            "description": "Array of **qualification**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/qualification"
            }
          },
          "logbook": {
            "description": "Array of **logbook**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/logbook"
            }
          },
          "course": {
            "description": "Array of **course**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/course"
            }
          },
          "qi": {
            "description": "Array of **quality**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/quality"
            }
          }
        }
      }
    },
    "parameters": {
      "ModelPKParam-user": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **User** record's primary key value"
      },
      "ModelPKParam-qualification": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Qualification** record's primary key value"
      },
      "ModelPKParam-logbook": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Logbook** record's primary key value"
      },
      "ModelPKParam-course": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Course** record's primary key value"
      },
      "ModelPKParam-quality": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Quality** record's primary key value"
      },
      "ModelPKParam-leadership": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Leadership** record's primary key value"
      },
      "ModelPKParam-pricing": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Pricing** record's primary key value"
      },
      "ModelPKParam-token": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "string",
          "uniqueItems": true
        },
        "description": "The desired **Token** record's primary key value"
      },
      "AttributeFilterParam": {
        "in": "query",
        "name": "_*_",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "To filter results based on a particular attribute, specify a query parameter with the same name as the attribute defined on your model. For instance, if our `Purchase` model has an `amount` attribute, we could send `GET /purchase?amount=99.99` to return a list of $99.99 purchases."
      },
      "WhereQueryParam": {
        "in": "query",
        "name": "where",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Instead of filtering based on a specific attribute, you may instead choose to provide a `where` parameter with the WHERE piece of a [Waterline criteria](https://sailsjs.com/documentation/concepts/models-and-orm/query-language), _encoded as a JSON string_. This allows you to take advantage of `contains`, `startsWith`, and other sub-attribute criteria modifiers for more powerful `find()` queries.\n\ne.g. `?where={\"name\":{\"contains\":\"theodore\"}}`"
      },
      "LimitQueryParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The maximum number of records to send back (useful for pagination). Defaults to 30."
      },
      "SkipQueryParam": {
        "in": "query",
        "name": "skip",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The number of records to skip (useful for pagination)."
      },
      "SortQueryParam": {
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The sort order. By default, returned records are sorted by primary key value in ascending order.\n\ne.g. `?sort=lastName%20ASC`"
      }
    }
  },
  "paths": {
    "/pricing": {
      "get": {
        "summary": "List Pricing (find where)",
        "description": "Find a list of **Pricing** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,duration,pricing,plans"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,duration,pricing,plans"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Pricing** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pricing"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Pricing",
        "description": "Create a new **Pricing** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Pricing"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Pricing** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricing"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Pricing instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pricing"
              }
            }
          }
        }
      }
    },
    "/qualifications": {
      "post": {
        "summary": "Create",
        "description": "Create qualification.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "education",
            "required": true,
            "schema": {}
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Qualification** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qualification"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Qualification instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/qualification"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Fetch",
        "description": "Fetch qualification.",
        "tags": [
          "Qualification"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logbooks": {
      "post": {
        "summary": "Create",
        "description": "Create logbook.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "logBookType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "summary",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Logbook** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logbook"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Logbook instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/logbook"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Fetch",
        "description": "Fetch logbook.",
        "tags": [
          "Logbook"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/courses": {
      "post": {
        "summary": "Create",
        "description": "Create course.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "courseTitle",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "in": "query",
            "name": "institution",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4
            }
          },
          {
            "in": "query",
            "name": "certificateNo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Course** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Course instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/course"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Fetch",
        "description": "Fetch course.",
        "tags": [
          "Course"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/qualities": {
      "post": {
        "summary": "Create",
        "description": "Create quality-improvement.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User submission is correct"
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Quality instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/quality"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Fetch",
        "description": "Fetch quality.",
        "tags": [
          "Quality"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/leaderships": {
      "post": {
        "summary": "Create",
        "description": "Create leadership.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "startYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Leadership** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leadership"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Leadership instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/leadership"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Fetch",
        "description": "Fetch leadership.",
        "tags": [
          "Leadership"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/dashboard": {
      "get": {
        "summary": "Dashboard",
        "description": "Dashboard admin.",
        "tags": [
          "Dashboard"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/users": {
      "get": {
        "summary": "Fetch users",
        "tags": [
          "Fetch users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "summary": "Create",
        "description": "Create user.",
        "tags": [
          "Create"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fullName",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 120
            }
          },
          {
            "in": "query",
            "name": "location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "phone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "role",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 8
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "This is for a successful transaction"
                    },
                    {
                      "type": "string",
                      "description": "This is for a bad entry from the user"
                    },
                    {
                      "type": "string",
                      "description": "This is for existing data from the user"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "summary": "Login",
        "description": "Login auth.",
        "tags": [
          "Login"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "201": {
            "description": "If all credentials are correct"
          },
          "401": {
            "description": "If wrong credentials"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh token",
        "tags": [
          "Refresh token"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "refresh",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Description for when token is valid"
          },
          "401": {
            "description": "Description for when token is invalid"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/forgot_password": {
      "post": {
        "summary": "Forgot password",
        "tags": [
          "Forgot password"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All good"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/reset_password": {
      "post": {
        "summary": "Reset password",
        "tags": [
          "Reset password"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Successful"
                    },
                    {
                      "type": "string",
                      "description": "Invalid"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/resend": {
      "post": {
        "summary": "Resend link",
        "tags": [
          "Resend link"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "The mail is sent again."
                    },
                    {
                      "type": "string",
                      "description": "The user is already verified"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/verify_email": {
      "get": {
        "summary": "Verify email",
        "tags": [
          "Verify email"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "The token is accepted and the user is verified"
                    },
                    {
                      "type": "string",
                      "description": "The token is expired or invalid"
                    },
                    {
                      "type": "string",
                      "description": "The email to be verified already exists"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/signout": {
      "get": {
        "summary": "Logout",
        "description": "Logout auth.",
        "tags": [
          "User"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Success"
                    },
                    {
                      "type": "string",
                      "description": "Success"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "summary": "Profile",
        "description": "Profile user.",
        "tags": [
          "User"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "When user not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/update": {
      "patch": {
        "summary": "Update",
        "description": "Update user.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fullName",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 120
            }
          },
          {
            "in": "query",
            "name": "location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "phone",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 11
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "This is for a successful transaction"
                    },
                    {
                      "type": "string",
                      "description": "This is for a bad entry from the user"
                    },
                    {
                      "type": "string",
                      "description": "This is for existing data from the user"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the User instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user-without-required-constraint"
              }
            }
          }
        }
      }
    },
    "/admin/users/{id}/status": {
      "patch": {
        "summary": "Status",
        "description": "update user status with admin.",
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/users/{id}/role": {
      "patch": {
        "summary": "Role",
        "description": "update user role with admin.",
        "tags": [
          "Role"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "supervisor",
                "client"
              ]
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/users/{id}/verify": {
      "patch": {
        "summary": "Verify",
        "description": "update user verification with admin.",
        "tags": [
          "Verify"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "emailStatus",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "verified",
                "unverified"
              ]
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/qualifications/{_id}": {
      "get": {
        "summary": "Read",
        "description": "Read qualification.",
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update",
        "description": "Update qualification.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "education",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-qualification"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Qualification** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qualification"
                }
              }
            }
          },
          "400": {
            "description": "This is for error from user"
          },
          "404": {
            "description": "Cannot update, **Qualification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Qualification instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/qualification-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete qualification.",
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logbooks/{_id}": {
      "get": {
        "summary": "Read",
        "description": "Read logbook.",
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update",
        "description": "Update logbook.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "logBookType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "summary",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-logbook"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Logbook** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logbook"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Logbook** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Logbook instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/logbook-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete logbook.",
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/courses/{_id}": {
      "get": {
        "summary": "Read",
        "description": "Read course.",
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update",
        "description": "Update course.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "courseTitle",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "in": "query",
            "name": "institution",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4
            }
          },
          {
            "in": "query",
            "name": "certificateNo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-course"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Course** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Course** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Course instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/course-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete course.",
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/qualities/{_id}": {
      "get": {
        "summary": "Read",
        "description": "Read quality.",
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update",
        "description": "Update quality.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "year",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "details",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-quality"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quality** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quality"
                }
              }
            }
          },
          "400": {
            "description": "This is for error from user"
          },
          "404": {
            "description": "Cannot update, **Quality** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Quality instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/quality-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete quality.",
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/leaderships/{_id}": {
      "patch": {
        "summary": "Update",
        "description": "Update leadership.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "startYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-leadership"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Leadership** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leadership"
                }
              }
            }
          },
          "400": {
            "description": "This is for error from user"
          },
          "404": {
            "description": "Cannot update, **Leadership** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Leadership instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/leadership-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete",
        "description": "Delete leadership.",
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "summary": "Read",
        "description": "Read leadership.",
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/course/find": {
      "get": {
        "summary": "List Course (find where) *",
        "description": "Find a list of **Course** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,courseTitle,institution,year,certificateNo,document,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,courseTitle,institution,year,certificateNo,document,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Course** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/course"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/course/find/{_id}": {
      "get": {
        "summary": "Get Course (find one) *",
        "description": "Look up the **Course** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-course"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,courseTitle,institution,year,certificateNo,document,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,courseTitle,institution,year,certificateNo,document,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Course** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Course** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/course/create": {
      "get": {
        "summary": "Create *",
        "description": "Create course.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "courseTitle",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "in": "query",
            "name": "institution",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4
            }
          },
          {
            "in": "query",
            "name": "certificateNo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "document",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Course** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/course/update/{_id}": {
      "get": {
        "summary": "Update *",
        "description": "Update course.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "courseTitle",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "in": "query",
            "name": "institution",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4
            }
          },
          {
            "in": "query",
            "name": "certificateNo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-course"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "document",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Course** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Course** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/course/destroy/{_id}": {
      "get": {
        "summary": "Delete Course (destroy) *",
        "description": "Delete the **Course** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-course"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Course** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Course** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/leadership/find": {
      "get": {
        "summary": "List Leadership (find where) *",
        "description": "Find a list of **Leadership** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,startYear,endYear,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,startYear,endYear,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Leadership** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/leadership"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/leadership/find/{_id}": {
      "get": {
        "summary": "Get Leadership (find one) *",
        "description": "Look up the **Leadership** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-leadership"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,startYear,endYear,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,startYear,endYear,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Leadership** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leadership"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Leadership** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/leadership/create": {
      "get": {
        "summary": "Create *",
        "description": "Create leadership.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "startYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Leadership** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leadership"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/leadership/update/{_id}": {
      "get": {
        "summary": "Update *",
        "description": "Update leadership.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "startYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-leadership"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Leadership** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leadership"
                }
              }
            }
          },
          "400": {
            "description": "This is for error from user"
          },
          "404": {
            "description": "Cannot update, **Leadership** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/leadership/destroy/{_id}": {
      "get": {
        "summary": "Delete Leadership (destroy) *",
        "description": "Delete the **Leadership** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-leadership"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Leadership** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leadership"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Leadership** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logbook/find": {
      "get": {
        "summary": "List Logbook (find where) *",
        "description": "Find a list of **Logbook** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,action,logBookType,firstTitle,firstYear,firstDocument,secondTitle,secondYear,secondDocument,summary,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,action,logBookType,firstTitle,firstYear,firstDocument,secondTitle,secondYear,secondDocument,summary,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Logbook** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/logbook"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logbook/find/{_id}": {
      "get": {
        "summary": "Get Logbook (find one) *",
        "description": "Look up the **Logbook** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-logbook"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,action,logBookType,firstTitle,firstYear,firstDocument,secondTitle,secondYear,secondDocument,summary,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,action,logBookType,firstTitle,firstYear,firstDocument,secondTitle,secondYear,secondDocument,summary,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Logbook** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logbook"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Logbook** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logbook/create": {
      "get": {
        "summary": "Create *",
        "description": "Create logbook.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "logBookType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "summary",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "firstDocument",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondDocument",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Logbook** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logbook"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logbook/update/{_id}": {
      "get": {
        "summary": "Update *",
        "description": "Update logbook.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "logBookType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "summary",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-logbook"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "firstDocument",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondDocument",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Logbook** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logbook"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Logbook** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logbook/destroy/{_id}": {
      "get": {
        "summary": "Delete Logbook (destroy) *",
        "description": "Delete the **Logbook** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-logbook"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Logbook** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logbook"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Logbook** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/pricing/find": {
      "get": {
        "summary": "List Pricing (find where) *",
        "description": "Find a list of **Pricing** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,duration,pricing,plans"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,duration,pricing,plans"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Pricing** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pricing"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/pricing/find/{_id}": {
      "get": {
        "summary": "Get Pricing (find one) *",
        "description": "Look up the **Pricing** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-pricing"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,duration,pricing,plans"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,duration,pricing,plans"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Pricing** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricing"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Pricing** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/pricing/create": {
      "get": {
        "summary": "Create Pricing *",
        "description": "Create a new **Pricing** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "maxLength": 30
            },
            "required": true
          },
          {
            "in": "query",
            "name": "duration",
            "schema": {
              "type": "string",
              "maxLength": 30
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pricing",
            "schema": {
              "type": "string",
              "maxLength": 30
            },
            "required": true
          },
          {
            "in": "query",
            "name": "plans",
            "schema": {},
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Pricing** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricing"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/pricing/update/{_id}": {
      "get": {
        "summary": "Update Pricing *",
        "description": "Update an existing **Pricing** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-pricing"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          },
          {
            "in": "query",
            "name": "duration",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          },
          {
            "in": "query",
            "name": "pricing",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          },
          {
            "in": "query",
            "name": "plans",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Pricing** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricing"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Pricing** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/pricing/destroy/{_id}": {
      "get": {
        "summary": "Delete Pricing (destroy) *",
        "description": "Delete the **Pricing** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-pricing"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Pricing** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricing"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Pricing** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/qualification/find": {
      "get": {
        "summary": "List Qualification (find where) *",
        "description": "Find a list of **Qualification** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,education,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,education,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Qualification** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/qualification"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/qualification/find/{_id}": {
      "get": {
        "summary": "Get Qualification (find one) *",
        "description": "Look up the **Qualification** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-qualification"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,education,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,education,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Qualification** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qualification"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Qualification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/qualification/create": {
      "get": {
        "summary": "Create *",
        "description": "Create qualification.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "education",
            "required": true,
            "schema": {}
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Qualification** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qualification"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/qualification/update/{_id}": {
      "get": {
        "summary": "Update *",
        "description": "Update qualification.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "education",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-qualification"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Qualification** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qualification"
                }
              }
            }
          },
          "400": {
            "description": "This is for error from user"
          },
          "404": {
            "description": "Cannot update, **Qualification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/qualification/destroy/{_id}": {
      "get": {
        "summary": "Delete Qualification (destroy) *",
        "description": "Delete the **Qualification** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-qualification"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Qualification** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qualification"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Qualification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quality/find": {
      "get": {
        "summary": "List Quality (find where) *",
        "description": "Find a list of **Quality** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,year,details,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,year,details,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Quality** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/quality"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quality/find/{_id}": {
      "get": {
        "summary": "Get Quality (find one) *",
        "description": "Look up the **Quality** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quality"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,year,details,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,year,details,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Quality** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quality"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Quality** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quality/create": {
      "get": {
        "summary": "Create *",
        "description": "Create quality-improvement.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "User submission is correct"
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quality/update/{_id}": {
      "get": {
        "summary": "Update *",
        "description": "Update quality.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "year",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "details",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-quality"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quality** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quality"
                }
              }
            }
          },
          "400": {
            "description": "This is for error from user"
          },
          "404": {
            "description": "Cannot update, **Quality** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quality/destroy/{_id}": {
      "get": {
        "summary": "Delete Quality (destroy) *",
        "description": "Delete the **Quality** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quality"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Quality** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quality"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Quality** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/token/find": {
      "get": {
        "summary": "List Token (find where) *",
        "description": "Find a list of **Token** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,userId,token"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,userId,token"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Token** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/token"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/token/find/{_id}": {
      "get": {
        "summary": "Get Token (find one) *",
        "description": "Look up the **Token** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-token"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,userId,token"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,userId,token"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Token** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Token** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/token/create": {
      "get": {
        "summary": "Create Token *",
        "description": "Create a new **Token** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string",
              "uniqueItems": true
            },
            "required": true
          },
          {
            "in": "query",
            "name": "token",
            "schema": {
              "type": "string",
              "uniqueItems": true
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Token** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/token/update/{_id}": {
      "get": {
        "summary": "Update Token *",
        "description": "Update an existing **Token** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-token"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "token",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Token** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Token** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/token/destroy/{_id}": {
      "get": {
        "summary": "Delete Token (destroy) *",
        "description": "Delete the **Token** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-token"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Token** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Token** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/find": {
      "get": {
        "summary": "List User (find where) *",
        "description": "Find a list of **User** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,fullName,img,email,emailStatus,emailChangeCandidate,phone,location,status,password,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,role,qualification,logbook,course,qi"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,fullName,img,email,emailStatus,emailChangeCandidate,phone,location,status,password,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,role,qualification,logbook,course,qi"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,qualification,logbook,course,qi"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **User** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/find/{_id}": {
      "get": {
        "summary": "Get User (find one) *",
        "description": "Look up the **User** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,fullName,img,email,emailStatus,emailChangeCandidate,phone,location,status,password,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,role,qualification,logbook,course,qi"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,fullName,img,email,emailStatus,emailChangeCandidate,phone,location,status,password,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,role,qualification,logbook,course,qi"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,qualification,logbook,course,qi"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/create": {
      "get": {
        "summary": "Create User *",
        "description": "Create a new **User** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "fullName",
            "schema": {
              "type": "string",
              "maxLength": 120
            },
            "required": true
          },
          {
            "in": "query",
            "name": "img",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email",
              "maxLength": 200,
              "uniqueItems": true
            },
            "required": true
          },
          {
            "in": "query",
            "name": "emailStatus",
            "schema": {
              "type": "string",
              "default": "unverified",
              "enum": [
                "unverified",
                "verified",
                "change-requested"
              ],
              "example": "unverified"
            }
          },
          {
            "in": "query",
            "name": "emailChangeCandidate",
            "schema": {
              "type": "string",
              "format": "email",
              "description": "unverified email address that this user wants to change to"
            },
            "description": "unverified email address that this user wants to change to"
          },
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string",
              "maxLength": 11
            }
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string",
              "maxLength": 60
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "default": "active",
              "enum": [
                "active",
                "inactive"
              ],
              "example": "active"
            }
          },
          {
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string",
              "minLength": 8
            },
            "required": true
          },
          {
            "in": "query",
            "name": "passwordResetToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "passwordResetTokenExpiresAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "emailProofToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "emailProofTokenExpiresAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "supervisor",
                "client"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "qualification",
            "schema": {
              "description": "Array of **qualification**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/qualification"
              }
            },
            "description": "Array of **qualification**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "logbook",
            "schema": {
              "description": "Array of **logbook**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/logbook"
              }
            },
            "description": "Array of **logbook**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "course",
            "schema": {
              "description": "Array of **course**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/course"
              }
            },
            "description": "Array of **course**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "qi",
            "schema": {
              "description": "Array of **quality**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/quality"
              }
            },
            "description": "Array of **quality**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/update/{_id}": {
      "get": {
        "summary": "Update *",
        "description": "Update user.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fullName",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 120
            }
          },
          {
            "in": "query",
            "name": "location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "phone",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 11
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string",
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "img",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email",
              "maxLength": 200,
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "emailStatus",
            "schema": {
              "type": "string",
              "default": "unverified",
              "enum": [
                "unverified",
                "verified",
                "change-requested"
              ],
              "example": "unverified"
            }
          },
          {
            "in": "query",
            "name": "emailChangeCandidate",
            "schema": {
              "type": "string",
              "format": "email",
              "description": "unverified email address that this user wants to change to"
            },
            "description": "unverified email address that this user wants to change to"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "default": "active",
              "enum": [
                "active",
                "inactive"
              ],
              "example": "active"
            }
          },
          {
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string",
              "minLength": 8
            }
          },
          {
            "in": "query",
            "name": "passwordResetToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "passwordResetTokenExpiresAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "emailProofToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "emailProofTokenExpiresAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "supervisor",
                "client"
              ]
            }
          },
          {
            "in": "query",
            "name": "qualification",
            "schema": {
              "description": "Array of **qualification**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/qualification"
              }
            },
            "description": "Array of **qualification**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "logbook",
            "schema": {
              "description": "Array of **logbook**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/logbook"
              }
            },
            "description": "Array of **logbook**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "course",
            "schema": {
              "description": "Array of **course**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/course"
              }
            },
            "description": "Array of **course**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "qi",
            "schema": {
              "description": "Array of **quality**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/quality"
              }
            },
            "description": "Array of **quality**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "This is for a successful transaction"
                    },
                    {
                      "type": "string",
                      "description": "This is for a bad entry from the user"
                    },
                    {
                      "type": "string",
                      "description": "This is for existing data from the user"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/destroy/{_id}": {
      "get": {
        "summary": "Delete User (destroy) *",
        "description": "Delete the **User** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for User *",
        "description": "Add a foreign record to one of this **User** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "qualification",
                "logbook",
                "course",
                "qi"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**qualification** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**logbook** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**course** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**qi** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **User** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for User *",
        "description": "Replace all of the child records in one of this **User** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "qualification",
                "logbook",
                "course",
                "qi"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "qualification",
            "description": "**User** record's foreign key values to use as the replacement for this collection (**qualification** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "**User** record's foreign key values to use as the replacement for this collection (**qualification** association)",
                "uniqueItems": true
              }
            }
          },
          {
            "in": "query",
            "name": "logbook",
            "description": "**User** record's foreign key values to use as the replacement for this collection (**logbook** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "**User** record's foreign key values to use as the replacement for this collection (**logbook** association)",
                "uniqueItems": true
              }
            }
          },
          {
            "in": "query",
            "name": "course",
            "description": "**User** record's foreign key values to use as the replacement for this collection (**course** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "**User** record's foreign key values to use as the replacement for this collection (**course** association)",
                "uniqueItems": true
              }
            }
          },
          {
            "in": "query",
            "name": "qi",
            "description": "**User** record's foreign key values to use as the replacement for this collection (**qi** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "**User** record's foreign key values to use as the replacement for this collection (**qi** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for User *",
        "description": "Remove a foreign record from one of this **User** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "qualification",
                "logbook",
                "course",
                "qi"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**qualification** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**logbook** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**course** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**qi** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **User** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/course": {
      "get": {
        "summary": "List Course (find where)",
        "description": "Find a list of **Course** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,courseTitle,institution,year,certificateNo,document,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,courseTitle,institution,year,certificateNo,document,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Course** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/course"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create",
        "description": "Create course.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "courseTitle",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "in": "query",
            "name": "institution",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4
            }
          },
          {
            "in": "query",
            "name": "certificateNo",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Course** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Course instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/course"
              }
            }
          }
        }
      }
    },
    "/course/{_id}": {
      "get": {
        "summary": "Get Course (find one)",
        "description": "Look up the **Course** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-course"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,courseTitle,institution,year,certificateNo,document,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,courseTitle,institution,year,certificateNo,document,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Course** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Course** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update",
        "description": "Update course.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "courseTitle",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 150
            }
          },
          {
            "in": "query",
            "name": "institution",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4
            }
          },
          {
            "in": "query",
            "name": "certificateNo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-course"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Course** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Course** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Course instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/course-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Course (destroy)",
        "description": "Delete the **Course** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-course"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Course** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Course** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/course/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Course",
        "description": "Populate and return foreign record(s) for the given association of this **Course** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Course"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-course"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "owner"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,courseTitle,institution,year,certificateNo,document,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,courseTitle,institution,year,certificateNo,document,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Course** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/leadership": {
      "get": {
        "summary": "List Leadership (find where)",
        "description": "Find a list of **Leadership** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,startYear,endYear,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,startYear,endYear,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Leadership** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/leadership"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create",
        "description": "Create leadership.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "startYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Leadership** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leadership"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Leadership instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/leadership"
              }
            }
          }
        }
      }
    },
    "/leadership/{_id}": {
      "get": {
        "summary": "Get Leadership (find one)",
        "description": "Look up the **Leadership** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-leadership"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,startYear,endYear,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,startYear,endYear,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Leadership** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leadership"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Leadership** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update",
        "description": "Update leadership.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "startYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endYear",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-leadership"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Leadership** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leadership"
                }
              }
            }
          },
          "400": {
            "description": "This is for error from user"
          },
          "404": {
            "description": "Cannot update, **Leadership** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Leadership instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/leadership-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Leadership (destroy)",
        "description": "Delete the **Leadership** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-leadership"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Leadership** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/leadership"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Leadership** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/leadership/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Leadership",
        "description": "Populate and return foreign record(s) for the given association of this **Leadership** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Leadership"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-leadership"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "owner"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,startYear,endYear,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,startYear,endYear,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Leadership** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logbook": {
      "get": {
        "summary": "List Logbook (find where)",
        "description": "Find a list of **Logbook** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,action,logBookType,firstTitle,firstYear,firstDocument,secondTitle,secondYear,secondDocument,summary,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,action,logBookType,firstTitle,firstYear,firstDocument,secondTitle,secondYear,secondDocument,summary,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Logbook** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/logbook"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create",
        "description": "Create logbook.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "logBookType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "summary",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Logbook** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logbook"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Logbook instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/logbook"
              }
            }
          }
        }
      }
    },
    "/logbook/{_id}": {
      "get": {
        "summary": "Get Logbook (find one)",
        "description": "Look up the **Logbook** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-logbook"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,action,logBookType,firstTitle,firstYear,firstDocument,secondTitle,secondYear,secondDocument,summary,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,action,logBookType,firstTitle,firstYear,firstDocument,secondTitle,secondYear,secondDocument,summary,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Logbook** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logbook"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Logbook** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update",
        "description": "Update logbook.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "logBookType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "secondYear",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "summary",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-logbook"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Logbook** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logbook"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Logbook** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Logbook instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/logbook-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Logbook (destroy)",
        "description": "Delete the **Logbook** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-logbook"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Logbook** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logbook"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Logbook** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/logbook/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Logbook",
        "description": "Populate and return foreign record(s) for the given association of this **Logbook** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Logbook"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-logbook"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "owner"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,action,logBookType,firstTitle,firstYear,firstDocument,secondTitle,secondYear,secondDocument,summary,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,action,logBookType,firstTitle,firstYear,firstDocument,secondTitle,secondYear,secondDocument,summary,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Logbook** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/pricing/{_id}": {
      "get": {
        "summary": "Get Pricing (find one)",
        "description": "Look up the **Pricing** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-pricing"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,duration,pricing,plans"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,duration,pricing,plans"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Pricing** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricing"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Pricing** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Pricing",
        "description": "Update an existing **Pricing** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-pricing"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Pricing** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricing"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Pricing** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Pricing instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pricing-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Pricing (destroy)",
        "description": "Delete the **Pricing** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Pricing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-pricing"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Pricing** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pricing"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Pricing** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/qualification": {
      "get": {
        "summary": "List Qualification (find where)",
        "description": "Find a list of **Qualification** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,education,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,education,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Qualification** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/qualification"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create",
        "description": "Create qualification.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "education",
            "required": true,
            "schema": {}
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Qualification** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qualification"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Qualification instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/qualification"
              }
            }
          }
        }
      }
    },
    "/qualification/{_id}": {
      "get": {
        "summary": "Get Qualification (find one)",
        "description": "Look up the **Qualification** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-qualification"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,education,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,education,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Qualification** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qualification"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Qualification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update",
        "description": "Update qualification.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "education",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-qualification"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Qualification** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qualification"
                }
              }
            }
          },
          "400": {
            "description": "This is for error from user"
          },
          "404": {
            "description": "Cannot update, **Qualification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Qualification instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/qualification-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Qualification (destroy)",
        "description": "Delete the **Qualification** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-qualification"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Qualification** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/qualification"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Qualification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/qualification/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Qualification",
        "description": "Populate and return foreign record(s) for the given association of this **Qualification** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Qualification"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-qualification"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "owner"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,education,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,education,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Qualification** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quality": {
      "get": {
        "summary": "List Quality (find where)",
        "description": "Find a list of **Quality** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,year,details,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,year,details,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Quality** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/quality"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create",
        "description": "Create quality-improvement.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challenges",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User submission is correct"
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Quality instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/quality"
              }
            }
          }
        }
      }
    },
    "/quality/{_id}": {
      "get": {
        "summary": "Get Quality (find one)",
        "description": "Look up the **Quality** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quality"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,year,details,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,year,details,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,owner"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Quality** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quality"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Quality** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update",
        "description": "Update quality.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "year",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "details",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "challenges",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "keyPositives",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "doDifferently",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-quality"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quality** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quality"
                }
              }
            }
          },
          "400": {
            "description": "This is for error from user"
          },
          "404": {
            "description": "Cannot update, **Quality** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Quality instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/quality-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Quality (destroy)",
        "description": "Delete the **Quality** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quality"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Quality** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quality"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Quality** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quality/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Quality",
        "description": "Populate and return foreign record(s) for the given association of this **Quality** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Quality"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quality"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "owner"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,year,details,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,title,year,details,challenges,keyPositives,doDifferently,owner"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Quality** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/token": {
      "get": {
        "summary": "List Token (find where)",
        "description": "Find a list of **Token** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,userId,token"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,userId,token"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Token** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/token"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Token",
        "description": "Create a new **Token** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Token"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Token** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Token instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/token"
              }
            }
          }
        }
      }
    },
    "/token/{_id}": {
      "get": {
        "summary": "Get Token (find one)",
        "description": "Look up the **Token** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-token"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,userId,token"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,userId,token"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Token** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Token** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Token",
        "description": "Update an existing **Token** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-token"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Token** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Token** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Token instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/token-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Token (destroy)",
        "description": "Delete the **Token** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-token"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Token** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/token"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Token** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "List User (find where)",
        "description": "Find a list of **User** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,fullName,img,email,emailStatus,emailChangeCandidate,phone,location,status,password,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,role,qualification,logbook,course,qi"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,fullName,img,email,emailStatus,emailChangeCandidate,phone,location,status,password,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,role,qualification,logbook,course,qi"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,qualification,logbook,course,qi"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **User** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create User",
        "description": "Create a new **User** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "User"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the User instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        }
      }
    },
    "/user/{_id}": {
      "get": {
        "summary": "Get User (find one)",
        "description": "Look up the **User** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,fullName,img,email,emailStatus,emailChangeCandidate,phone,location,status,password,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,role,qualification,logbook,course,qi"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,fullName,img,email,emailStatus,emailChangeCandidate,phone,location,status,password,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,role,qualification,logbook,course,qi"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,qualification,logbook,course,qi"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update",
        "description": "Update user.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fullName",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 120
            }
          },
          {
            "in": "query",
            "name": "location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "phone",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 11
            }
          },
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "This is for a successful transaction"
                    },
                    {
                      "type": "string",
                      "description": "This is for a bad entry from the user"
                    },
                    {
                      "type": "string",
                      "description": "This is for existing data from the user"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the User instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete User (destroy)",
        "description": "Delete the **User** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for User",
        "description": "Add a foreign record to one of this **User** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "qualification",
                "logbook",
                "course",
                "qi"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**qualification** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**logbook** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**course** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**qi** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **User** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for User",
        "description": "Remove a foreign record from one of this **User** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "qualification",
                "logbook",
                "course",
                "qi"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**qualification** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**logbook** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**course** association)",
                  "uniqueItems": true
                },
                {
                  "type": "string",
                  "description": "**User** record's foreign key values to use as the replacement for this collection (**qi** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **User** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/{_id}/{association}": {
      "put": {
        "summary": "Replace for User",
        "description": "Replace all of the child records in one of this **User** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "qualification",
                "logbook",
                "course",
                "qi"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "**User** record's foreign key values to use as the replacement for this collection (**qualification** association)",
                      "uniqueItems": true
                    },
                    {
                      "type": "string",
                      "description": "**User** record's foreign key values to use as the replacement for this collection (**logbook** association)",
                      "uniqueItems": true
                    },
                    {
                      "type": "string",
                      "description": "**User** record's foreign key values to use as the replacement for this collection (**course** association)",
                      "uniqueItems": true
                    },
                    {
                      "type": "string",
                      "description": "**User** record's foreign key values to use as the replacement for this collection (**qi** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for User",
        "description": "Populate and return foreign record(s) for the given association of this **User** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "qualification",
                "logbook",
                "course",
                "qi"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,fullName,img,email,emailStatus,emailChangeCandidate,phone,location,status,password,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,role,qualification,logbook,course,qi"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "createdAt,updatedAt,id,fullName,img,email,emailStatus,emailChangeCandidate,phone,location,status,password,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,role,qualification,logbook,course,qi"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/qualification"
                      },
                      {
                        "$ref": "#/components/schemas/logbook"
                      },
                      {
                        "$ref": "#/components/schemas/course"
                      },
                      {
                        "$ref": "#/components/schemas/quality"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}